import assert from "assert";
import { expect } from "chai";
import { addrs, pdp, print } from "./initialize";
import { ethers } from "hardhat";

var path = require('path');
var name = path.basename(__filename);

describe(name, () => {

  it("get 0", async () => {
    const tx = pdp.GetUnVerifyProofList()
    let res = await tx
    // console.log(res)
    assert.equal(res.length, 0)
  });

  it("submit", async () => {
    const tx = pdp.SubmitVerifyProofRequest(
      {
        Version: 1,
        Proofs: [12,0,0,0,13,168,36,142,239,241,190,174,78,123,74,25,236,70,160,33,42,139,251,144,85,212,54,243,3,136,203,23,172,190,250,6,15,197,136,246,108,39,252,91,35,79,172,134,130,4,81,107,0,247,110,32,118,109,131,32,49,181,52,105,17,159,145,3,48,243,3,35,53,235,139,4,252,106,23,80,122,141,245,103,34,30,129,25,219,49,213,76,90,225,20,218,111,250,139,91,170,185,152,180,109,224,245,191,79,137,186,50,206,31,146,54,51,141,150,23,160,123,208,54,47,137,139,117,160,131,89,56,34,127,149,215,252,152,111,80,13,47,225,28,81,239,161,240,237,204,21,49,208,149,39,189,82,15,23,117,233,205,228,92,232,190,235,154,102,20,103,249,96,243,245,18,213,252,200,6,48,135,17,203,137,41,120,83,171,132,101,170,101,110,84,126,214,184,198,52,12,81,86,100,33,234,226,46,144,128,199,8,213,248,0,29,205,253,45,149,112,52,200,24,46,251,75,30,236,248,177,233,201,166,70,8,156,250,214,184,100,188,77,246,217,249,107,98,49,83,232,76,29,107,152,132,238,214,155,33,136,36,96,31,51,143,103,219,72,211,236,162,24,25,197,208,65,19,244,125,84,84,190,212,42,64,220,201,86,32,75,35,38,95,136,180,203,77,21,106,218,211,168,216,42,64,1,129,116,149,81,164,128,213,60,214,213,118,63,148,228,69,239,61,152,93,121,37,193,123,11,56,215,48,99,63,78,252,222,141,112,8,235,210,42,152,5,81,86,217,48,184,195,72,183,122,102,140,223,107,2,161,69,69,73,105,153,196,29,135,152,81,225,253,240,122,165,23,110,243,126,121,52,227,140,245,132,59,228,92,38,165,141,124,242,62,137,205,101,117,182,15,0,23,251,175,100,203,215,202,190,110,43,221,217,138,243,150,65,91,0,120,244,45,0,103,15,45,232,251,194,192,145,128,233,16,201,225,220,97,116,224,247,179,57,208,180,96,31,249,244,29,90,21,166,250,209,254,115,2,108,50,214,227,82,100,140,98,4,35,21,249,124,154,27,193,150,187,140,108,163,136,6,125,126,172,232,196,84,183,196,78,76,9,209,218,110,1,227,153,105,109,139,35,161,164,64,79,3,113,44,189,147,113,247,51,224,199,149,106,160,54,249,150,67,25,83,43,174,7,3,6,184,50,209,94,44,186,206,178,238,73,147,185,118,68,20,51,88,154,68,98,242,38,82,209,140,76,191,58,140,86,220,234,114,187,63,41,114,12,102,122,232,127,210,207,232,145,6,127,36,215,105,234,237,94,172,135,237,28,31,6,138,17,33,48,210,250,136,161,44,171,139,108,176,92,233,74,208,232,23,22,230,41,44,81,162,104,17,136,114,202,132,72,128,97,112,58,236,130,40,96,225,252,181,19,198,165,145,91,186,241,127,63,210,226,224,203,126,93,179,183,35,24,134,133,187,217,186,158,106,86,164,81,106,255,130,141,105,18,90,130,86,123,254,45,50,34,17,82,101,171,208,186,251,207,121,167,237,142,255,0,193,203,153,148,73,216,112,24,97,107,126,228,195,188,106,28,136,4,239,181,20,142,252,27,118,219,11,75,237,232,235,118,174,249,91,40,24,12,255,156,100,53,212,103,50,200,59,119,134,102,193,181,133,61,205,183,196,23,70,134,69,90,11,178,132,85,248,171,247,52,6,14,150,4,2,214,234,178,250,98,192,23,58,135,213,57,198,176,124,177,246,151,139,205,125,110,122,28,95,109,63,154,164,148,233,209,99,176,77,255,97,111,18,15,28,241,135,192,170,215,167,223,149,177,239,20,236,82,105,239,251,179,109,232,50,189,51,119,127,50,224,204,252,23],
        FileIds: [[1]],
        Tags: [[1]],
        RootHashes: [[1]]
      },
      [{ Index: 1, Rand: 1 }],
      [{
        PathLen: 1,
        Path: [{ Layer: 1, Index: 1, Hash: [1] }],
      }],
    )
    await expect(tx).to.not.be.reverted;
  });

  it("get 1", async () => {
    const tx = pdp.GetUnVerifyProofList()
    let res = await tx
    // console.log(res[0].proof.Proofs)

    // let a = ethers.utils.arrayify(res[0].proof.Proofs)
    // console.log(a)
    assert.equal(res.length, 1)
  });


  // it("verify", async () => {
  //   const tx = pdp.VerifyProof(
  //     {
  //       Proof: {
  //         Version: 1,
  //         Proofs: [1,2],
  //         FileIds: [[1]],
  //         Tags: [[1]],
  //         RootHashes: [[1]]
  //       },
  //       State: true,
  //       LastUpdateHeight: 0,
  //     },
  //     [{ Index: 1, Rand: 1 }],
  //     [{
  //       PathLen: 1,
  //       Path: [{ Layer: 1, Index: 1, Hash: [1] }],
  //     }],
  //   )
  //   await expect(tx).to.not.be.reverted;
  // });

  // it("get 0 again", async () => {
  //   const tx = pdp.GetUnVerifyProofList()
  //   let res = await tx
  //   // console.log(res)
  //   assert.equal(res.length, 0)
  // });

});
